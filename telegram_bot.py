import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from ai_service import AIService
from models import Conversation, UserProfile, Program
from app import db, app

logger = logging.getLogger(__name__)

# Get Telegram Bot Token from environment
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "your-bot-token-here").strip()

class ITMOBot:
    def __init__(self):
        self.ai_service = AIService()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        if not update.effective_user or not update.message:
            return
            
        user = update.effective_user
        welcome_message = """
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏:
‚Ä¢ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product** - –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üîÑ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –°–Ω–∞—á–∞–ª–∞ —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ
2. –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
3. –ó–∞—Ç–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

üìù **–ù–∞—á–Ω–µ–º —Å –æ–ø—Ä–æ—Å–∞!** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –Ω–∞—á–Ω—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –æ–ø—ã—Ç–µ.
        """
        
        # Create reply keyboard
        keyboard = [
            [KeyboardButton("üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"), KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        
        # Store user interaction
        with app.app_context():
            self._save_conversation(str(user.id), user.username or "", "/start", welcome_message)

    async def profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /profile command"""
        if not update.effective_user or not update.message:
            return
            
        user = update.effective_user
        
        profile_message = """
üë§ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:

1. –í–∞—à –æ–ø—ã—Ç (–Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–∑):
   ‚Ä¢ technical - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∏–Ω–∂–µ–Ω–µ—Ä–∏—è)
   ‚Ä¢ product - –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ (–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –±–∏–∑–Ω–µ—Å)
   ‚Ä¢ mixed - —Å–º–µ—à–∞–Ω–Ω—ã–π –æ–ø—ã—Ç
   ‚Ä¢ beginner - –Ω–∞—á–∏–Ω–∞—é—â–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò

2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã (—á–∏—Å–ª–æ)

3. –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):
   ‚Ä¢ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
   ‚Ä¢ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
   ‚Ä¢ data science
   ‚Ä¢ deep learning
   ‚Ä¢ computer vision
   ‚Ä¢ nlp
   ‚Ä¢ —Å—Ç–∞—Ä—Ç–∞–ø—ã

–ü—Ä–∏–º–µ—Ä: technical, 3, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, computer vision, —Å—Ç–∞—Ä—Ç–∞–ø—ã
        """
        
        await update.message.reply_text(profile_message)
        
        with app.app_context():
            self._save_conversation(str(user.id), user.username or "", "/profile", profile_message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle all text messages"""
        if not update.effective_user or not update.message or not update.message.text:
            return
            
        user = update.effective_user
        message_text = update.message.text
        
        with app.app_context():
            # Check if it's a profile update
            if self._is_profile_update(message_text):
                response = self._update_user_profile(str(user.id), user.username or "", message_text)
                await update.message.reply_text(response)
                self._save_conversation(str(user.id), user.username or "", message_text, response)
                return
            
            # Handle predefined buttons
            if message_text in ["üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"]:
                # Reset user survey to start over
                with app.app_context():
                    user_profile = UserProfile.query.filter_by(telegram_user_id=str(user.id)).first()
                    if user_profile:
                        user_profile.survey_step = 0
                        db.session.commit()
                response = await self.ai_service.generate_response("–Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", str(user.id))
            elif message_text in ["üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"]:
                response = self._compare_programs()
            elif message_text in ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]:
                response = self._get_user_profile(str(user.id))
            elif message_text in ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]:
                response = """
üí° –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò:

‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é  
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!
                """
            else:
                # Use AI service for general questions
                response = await self.ai_service.generate_response(message_text, str(user.id))
            
            await update.message.reply_text(response)
            self._save_conversation(str(user.id), user.username or "", message_text, response)

    def _is_profile_update(self, message: str) -> bool:
        """Check if message is a profile update"""
        parts = message.split(',')
        if len(parts) >= 3:
            background_keywords = ['technical', 'product', 'mixed', 'beginner']
            return any(keyword in message.lower() for keyword in background_keywords)
        return False

    def _update_user_profile(self, user_id: str, username: str, message: str) -> str:
        """Update user profile based on message"""
        try:
            parts = [part.strip() for part in message.split(',')]
            if len(parts) < 3:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –±—ç–∫–≥—Ä–∞—É–Ω–¥, –≥–æ–¥—ã –æ–ø—ã—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—ã"
            
            background = parts[0].lower()
            try:
                experience_years = int(parts[1])
            except ValueError:
                return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–æ–≤ –æ–ø—ã—Ç–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ."
            
            interests = [interest.strip() for interest in parts[2:]]
            
            # Find or create user profile
            profile = UserProfile.query.filter_by(telegram_user_id=str(user_id)).first()
            if profile:
                profile.background = background
                profile.experience_years = experience_years
                profile.interests = interests
                profile.username = username
            else:
                profile = UserProfile()
                profile.telegram_user_id = str(user_id)
                profile.username = username
                profile.background = background
                profile.experience_years = experience_years
                profile.interests = interests
                db.session.add(profile)
            
            db.session.commit()
            
            # Generate personalized recommendation
            recommendation = self._generate_personalized_recommendation(profile)
            
            return f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{recommendation}"
            
        except Exception as e:
            logger.error(f"Error updating profile: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def _generate_personalized_recommendation(self, profile: UserProfile) -> str:
        """Generate personalized program recommendation"""
        background = profile.background
        interests = profile.interests or []
        experience = profile.experience_years or 0
        
        ai_keywords = ['–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'deep learning', 'computer vision', 'nlp', 'data science']
        product_keywords = ['–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—Å—Ç–∞—Ä—Ç–∞–ø—ã', '–±–∏–∑–Ω–µ—Å']
        
        ai_interest_count = sum(1 for interest in interests if any(keyword in interest.lower() for keyword in ai_keywords))
        product_interest_count = sum(1 for interest in interests if any(keyword in interest.lower() for keyword in product_keywords))
        
        recommendation = "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n"
        
        if background == 'technical' and ai_interest_count > product_interest_count:
            recommendation += """
**–ü—Ä–æ–≥—Ä–∞–º–º–∞ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"** –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—Å:

‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è ML
‚úÖ –ë–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚úÖ –†–æ–ª–∏: ML Engineer, Data Engineer, Data Scientist
‚úÖ –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:
‚Ä¢ Deep Learning –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ Computer Vision
‚Ä¢ Natural Language Processing
‚Ä¢ MLOps –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            """
        elif background == 'product' or product_interest_count > ai_interest_count:
            recommendation += """
**–ü—Ä–æ–≥—Ä–∞–º–º–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"** –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—Å:

‚úÖ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ò–ò
‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∫–∞–∫ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫
‚úÖ –†–æ–ª–∏: AI Product Manager, AI Project Manager
‚úÖ –ò–∑—É—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–æ–∫

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ AI Product Strategy
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤
            """
        else:
            recommendation += """
**–û–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏**, –Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:

**"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"** –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:
‚Ä¢ –ì–ª—É–±–∂–µ –∏–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ML/AI
‚Ä¢ –ó–∞–Ω–∏–º–∞—Ç—å—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å ML Engineer'–æ–º

**"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"** –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å AI-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç—ã–∫–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –±–∏–∑–Ω–µ—Å–∞
‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
            """
        
        return recommendation

    def _compare_programs(self) -> str:
        """Compare both AI programs"""
        try:
            programs = Program.query.all()
            if len(programs) < 2:
                return "–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            comparison = """
üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û:

**1. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç**
‚Ä¢ –§–æ–∫—É—Å: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ò–ò –∏ ML
‚Ä¢ –†–æ–ª–∏: ML Engineer, Data Engineer, Data Scientist
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—ã: X5 Group, Ozon –ë–∞–Ω–∫, –ú–¢–°, Sber AI, –Ø–Ω–¥–µ–∫—Å
‚Ä¢ –ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: 51-80 (—Ä–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

**2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏**  
‚Ä¢ –§–æ–∫—É—Å: –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ò–ò-—Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –†–æ–ª–∏: AI Product Manager, AI Project Manager
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—ã: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫, –ê–ª—å—Ñ–∞–§—É—Ç—É—Ä–µ
‚Ä¢ –ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: 14
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò, —Å—Ç–∞—Ä—Ç–∞–ø—ã

**–û–±—â–µ–µ:**
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –≥–æ–¥–∞
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 599,000 ‚ÇΩ/–≥–æ–¥
‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ—á–Ω–æ–µ + –æ–Ω–ª–∞–π–Ω
            """
            return comparison
            
        except Exception as e:
            logger.error(f"Error comparing programs: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö."

    def _get_user_profile(self, user_id: str) -> str:
        """Get user profile information"""
        try:
            profile = UserProfile.query.filter_by(telegram_user_id=str(user_id)).first()
            if not profile:
                return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
            
            profile_info = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–ë—ç–∫–≥—Ä–∞—É–Ω–¥: {profile.background}
–û–ø—ã—Ç: {profile.experience_years} –ª–µ—Ç
–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile.interests) if profile.interests else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile
            """
            return profile_info
            
        except Exception as e:
            logger.error(f"Error getting profile: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."

    def _get_career_info(self) -> str:
        """Get career information"""
        return """
üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:

**–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:**
‚Ä¢ ML Engineer: 170,000 - 300,000+ ‚ÇΩ
‚Ä¢ Data Engineer: 150,000 - 280,000 ‚ÇΩ  
‚Ä¢ Data Scientist: 180,000 - 350,000 ‚ÇΩ
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏: –Ø–Ω–¥–µ–∫—Å, –°–±–µ—Ä, –ú–¢–°, X5 Group

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:**
‚Ä¢ AI Product Manager: 150,000 - 400,000+ ‚ÇΩ
‚Ä¢ AI Project Manager: 120,000 - 300,000 ‚ÇΩ
‚Ä¢ AI Product Analyst: 100,000 - 250,000 ‚ÇΩ
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏–∏: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫, —Å—Ç–∞—Ä—Ç–∞–ø—ã, —Ç–µ—Ö–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏

–°–ø—Ä–æ—Å –Ω–∞ AI-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ 40% –≤ –≥–æ–¥!
        """

    def _get_admission_info(self) -> str:
        """Get admission information"""
        return """
üìù –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å:

**–°–ø–æ—Å–æ–±—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:**
1. –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã (–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ)
2. Junior ML Contest (–±–µ–∑ —ç–∫–∑–∞–º–µ–Ω–æ–≤)
3. –ö–æ–Ω–∫—É—Ä—Å "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" –ò–¢–ú–û (85+ –±–∞–ª–ª–æ–≤)
4. –ú–µ–≥–∞–û–ª–∏–º–ø–∏–∞–¥–∞ –ò–¢–ú–û
5. –û–ª–∏–º–ø–∏–∞–¥–∞ "–Ø-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ

**–ë–ª–∏–∂–∞–π—à–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã:**
‚Ä¢ 05.08.2025, 04:00
‚Ä¢ 07.08.2025, 04:00  
‚Ä¢ 12.08.2025, 04:00

**–î–æ–∫—É–º–µ–Ω—Ç—ã:** https://abitlk.itmo.ru/
**–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** https://abit.itmo.ru/programs/master
        """

    def _save_conversation(self, user_id: str, username: str, message: str, response: str):
        """Save conversation to database"""
        try:
            conversation = Conversation()
            conversation.telegram_user_id = user_id
            conversation.username = username  
            conversation.message = message
            conversation.response = response
            db.session.add(conversation)
            db.session.commit()
        except Exception as e:
            logger.error(f"Error saving conversation: {e}")

def setup_bot():
    """Setup and configure the Telegram bot"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    bot = ITMOBot()
    
    # Add handlers
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("profile", bot.profile))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    return application

def run_bot(application):
    """Run the Telegram bot"""
    try:
        logger.info("Starting bot polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error running bot: {e}")
